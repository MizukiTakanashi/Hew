//=======================================
// 氷の敵の管理関係(ヘッダファイル)
// 作成日：2022/12/22
// 作成者：矢野翔大
//=======================================
#pragma once

#ifndef _ENEMY_ICERAIN_MANAGEMENT_H_
#define _ENEMY_ICERAIN_MANAGEMENT_H_

#include "main.h"
#include "management_enemy.h"
#include "enemy_icerain.h"
#include "bullet.h"
#include "draw_object.h"

class EnemyIceRainManagement :public EnemyManagement
{
//定数
public:
	//ここで初期化
	//敵自身
	static const int ATTACK = 5;			//攻撃値
	//弾
	static const int BULLET_ATTACK = 1;		//攻撃値

private:
	//ここで初期化
	//敵自身
	static const int ENEMY_NUM[(int)STAGE::NUM];		//敵を出現させる数
	static const int BULLET_NUM = 20;	//同時に弾を出現させる数

	//cppで初期化
	//弾
	static const float BULLET_SIZE_X;		//サイズX
	static const float BULLET_SIZE_Y;		//サイズY
	static const float BULLET_SPEED;		//スピード


	//メンバ変数
private:
	EnemyIceRain* m_pEnemyIceRain = nullptr;	//敵のクラス
	Bullet* m_pBullet = nullptr;				//弾のクラス
	DrawObject m_pDrawObjectEnemy;				//敵の描画オブジェクト
	DrawObject m_pDrawObjectBullet;				//弾の描画オブジェクト
	int m_SE_13 = 0;							//氷柱を降らせる音

	int m_stage_num = 0;						//ステージ

	//敵の位置配列
	D3DXVECTOR2 m_SetEnemy[(int)STAGE::NUM][11] = {
		//チュートリアル
		{
			D3DXVECTOR2(0.0f, 0.0f),
		},
		//火星
		{                              //マス目
			D3DXVECTOR2(52.5f + (105 * 5), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(52.5f + (105 * 3), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(52.5f + (105 * 7), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(52.5f + (105 * 5), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(52.5f + (105 * 1), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(52.5f + (105 * 9), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(52.5f + (105 * 5), -EnemyIceRain::SIZE_Y / 2)
		},
		//水星
		{
			D3DXVECTOR2(71.0f + (142.0f * 2.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 6.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 2.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 6.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 1.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 7.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 1.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 7.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 3.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 7.0f), -EnemyIceRain::SIZE_Y / 2),
			D3DXVECTOR2(71.0f + (142.0f * 2.0f), -EnemyIceRain::SIZE_Y / 2),
		},
		//土星
		{
			D3DXVECTOR2(0.0f, 0.0f),
		},
		//金星
		{
			D3DXVECTOR2(0.0f, 0.0f),
		}
	};

	//敵を出す時間
	int m_SetEnemyTime[(int)STAGE::NUM][11] = {
		//チュートリアル
		{
			0,
		},
		//火星
		{
			60 * 5,
			60 * 50,
			60 * 50 + 1,
			60 * 80,
			60 * 125,
			60 * 125 + 1,
			60 * 135,
		},
		//水星
		{
			60 * 5,
			60 * 5 + 1,
			60 * 30,
			60 * 30 + 1,
			60 * 70,
			60 * 70 + 1,
			60 * 115,
			60 * 115 + 1,
			60 * 140,
			60 * 160,
			60 * 170
		},
		//土星
		{
			0,
		},
		//金星
		{
			0,
		}
	};

	//メンバ関数
public:
	//デフォルトコンストラクタ
	EnemyIceRainManagement() {}

	//引数付きコンストラクタ
	EnemyIceRainManagement(DrawObject& pDrawObject1, DrawObject& pDrawObject2, int stage);

	//デストラクタ
	~EnemyIceRainManagement()override {}

	//更新処理
	void Update(const D3DXVECTOR2& PlayerPos = D3DXVECTOR2(0.0f, 0.0f));

	//描画処理
	void Draw(void)const;

	//指定したのHPを減らす　敵が死んだらtrueを返す
	bool ReduceHP(int index_num, int reduceHP)override;

	//指定した敵を消す
	void DeleteObj(int index_num)override;

	//指定した弾を消す
	void DeleteBullet(int index_num)override;

	//指定した番号の敵の座標を返す(オーバーライド)
	const D3DXVECTOR2& GetObjPos(int index_num)const override { return m_pEnemyIceRain[index_num].GetPos(); }

	//指定した番号の敵のサイズを返す(オーバーライド)
	const D3DXVECTOR2& GetObjSize(int index_num = 0)const override { return m_pEnemyIceRain[0].GetSize(); }

	//指定した番号の弾の座標を返す(オーバーライド)
	const D3DXVECTOR2& GetBulletPos(int index_num)const override { return m_pBullet[index_num].GetPos(); }

	//指定した番号の弾のサイズを返す(オーバーライド)
	const D3DXVECTOR2& GetBulletSize(int index_num = 0)const override { return m_pBullet[0].GetSize(); }

	//指定した番号の敵を止める
	void StopEnemy(int index_num, int time) override { m_pEnemyIceRain[index_num].StopEnemy(time); }

};

#endif // !_ENEMY_ICERAIN_MANAGEMENT_H_